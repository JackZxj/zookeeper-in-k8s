# application/zookeeper/zookeeper.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zk-cm
data:
  zkReplicas: "3"                  # zk集群中的节点数
  ## zk配置，详见http://zookeeper.apache.org/doc/r3.5.6/zookeeperAdmin.html
  dataDir: "/data"                 # 存储内存数据库快照的位置
  tickTime: "2000"                 # 时间配置中的基本单位（以毫秒为单位）
  dataLogDir: "/datalog"           # 将事务日志写入dataLogDir
  confDir: "/conf"                 # zk节点的配置的路径
  initLimit: "10"                  # 初始同步的最大间隔次数
  syncLimit: "5"                   # 同步的最大间隔次数
  maxClientCnxns: "60"             # 客户端连接的最大数量
  autopurge.snapRetainCount: "3"   # 要保留在dataDir中的快照数
  autopurge.purgeInterval: "12"    # 清除任务间隔（以小时为单位），0为禁用自动清除
  admin.enableServer: "true"       # 内嵌的管理控制台是通过jetty启动,默认占用8080端口，选择是否启用
  standaloneEnabled: "true"        # 设置为false时，可以以复制模式启动单个服务器，可以由观察者运行单个参与者，并且群集可以重新配置到一个节点，然后从一个节点。为了向后兼容，默认值为true。
  minSessionTimeout: "4000"        # 服务器允许客户端进行协商的最小会话超时（以毫秒为单位）
  maxSessionTimeout: "40000"       # 服务器允许客户端进行协商的最大会话超时（以毫秒为单位）
  ## jvm 配置
  logDir: "/logs"                  # java运行日志
  jvmHeap: "500M"                  # jvm堆内存限制
---
apiVersion: v1
kind: Service
metadata:
  name: zk-headless-service
  labels:
    app: zk
spec:
  ports:
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: zk
---
apiVersion: v1
kind: Service
metadata:
  name: zk-cluster-service
  labels:
    app: zk
spec:
  ports:
  - port: 2181
    name: client
  selector:
    app: zk
---
# 设置应用POD集群处于运行状态最低个数
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: zk-pdb
spec:
  selector:
    matchLabels:
      app: zk
  maxUnavailable: 1   # 表示最大不可用POD数，表示应用POD集群处于不可用状态的最大POD数
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zk
spec:
  selector:
    matchLabels:
      app: zk
  serviceName: zk-headless-service
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel        # 平行启动     #OrderedReady   # 采用顺序启动的方式
  template:
    metadata:
      labels:
        app: zk
    spec:
      affinity:
        podAntiAffinity:  # pod反关联性规则
          requiredDuringSchedulingIgnoredDuringExecution:   # 当该节点满足以下规则时，pod不希望被调度到该节点
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - zk
              topologyKey: "kubernetes.io/hostname"   # 为了控制在同一主机上没有两个实例以实现高可用
      containers:
      - name: k8s-zookeeper
        imagePullPolicy: Never    # IfNotPresent
        image: "k8s-zookeeper:3.5.6"
        resources:
          requests:
            memory: "1Gi"   # 内存需求
            cpu: "0.5"      # cpu频率
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        - containerPort: 8080
          name: admin-server
        env:
        - name : ZK_REPLICAS
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: zkReplicas
        - name : ZOO_DATA_DIR
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: dataDir
        - name : ZOO_TICK_TIME
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: tickTime
        - name : ZOO_DATA_LOG_DIR
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: dataLogDir
        - name : ZOO_CONF_DIR
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: confDir
        - name : ZOO_INIT_LIMIT
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: initLimit
        - name : ZOO_SYNC_LIMIT
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: syncLimit
        - name : ZOO_MAX_CLIENT_CNXNS
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: maxClientCnxns
        - name : ZOO_AUTOPURGE_SNAPRETAINCOUNT
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: autopurge.snapRetainCount
        - name : ZOO_AUTOPURGE_PURGEINTERVAL
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: autopurge.purgeInterval
        - name : ZOO_ADMINSERVER_ENABLED
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: admin.enableServer
        - name : ZOO_STANDALONE_ENABLED
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: standaloneEnabled
        - name : MIN_SESSION_TIMEOUT
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: minSessionTimeout
        - name : MAX_SESSION_TIMEOUT
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: maxSessionTimeout
        - name : ZK_LOG_DIR
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: logDir
        - name : ZK_HEAP_SIZE
          valueFrom:
            configMapKeyRef:
                name: zk-cm
                key: jvmHeap
        - name: ZK_CLIENT_PORT
          value: "2181"
        - name: ZK_SERVER_PORT
          value: "2888"
        - name: ZK_ELECTION_PORT
          value: "3888"
        - name: LOG_LEVEL
          value: "INFO"
        command:
        - sh
        - -c
        - "start-zookeeper"
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /data
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi
      storageClassName: local-storage   # 需要先运行 zk-local-pv.yml 来创建好要用的持久卷
