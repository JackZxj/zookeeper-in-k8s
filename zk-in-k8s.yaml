---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zk-cm-env
  labels:
    app: zk
data:
  ZK_REPLICAS: "3"                      # zk集群中的节点数\
  ZK_CLIENT_PORT: "2181"                # 修改的话需要把下方容器的暴露端口也改掉
  ZK_SERVER_PORT: "2888"                # 修改的话需要把下方容器的暴露端口也改掉
  ZK_ELECTION_PORT: "3888"              # 修改的话需要把下方容器的暴露端口也改掉
  LOG_LEVEL: "INFO"                     # log4j的日志级别
  ## zk配置，详见http://zookeeper.apache.org/doc/r3.5.6/zookeeperAdmin.html
  ZOO_DATA_DIR: "/data"                 # 存储内存数据库快照的位置
  ZOO_TICK_TIME: "2000"                 # 时间配置中的基本单位（以毫秒为单位）
  ZOO_DATA_LOG_DIR: "/datalog"          # 将事务日志写入dataLogDir
  ZOO_CONF_DIR: "/conf"                 # zk节点的配置的路径
  ZOO_INIT_LIMIT: "10"                  # 初始同步的最大间隔次数
  ZOO_SYNC_LIMIT: "5"                   # 同步的最大间隔次数
  ZOO_MAX_CLIENT_CNXNS: "60"            # 客户端连接的最大数量
  ZOO_AUTOPURGE_SNAPRETAINCOUNT: "3"    # 要保留在dataDir中的快照数
  ZOO_AUTOPURGE_PURGEINTERVAL: "12"     # 清除任务间隔（以小时为单位），0为禁用自动清除
  ZOO_ADMINSERVER_ENABLED: "true"       # 内嵌的管理控制台是通过jetty启动,默认占用8080端口，选择是否启用
  ZOO_STANDALONE_ENABLED: "true"        # 设置为false时，可以以复制模式启动单个服务器，可以由观察者运行单个参与者，并且群集可以重新配置到一个节点，然后从一个节点。为了向后兼容，默认值为true。
  MIN_SESSION_TIMEOUT: "4000"           # 服务器允许客户端进行协商的最小会话超时（以毫秒为单位）
  MAX_SESSION_TIMEOUT: "40000"          # 服务器允许客户端进行协商的最大会话超时（以毫秒为单位）
  ## jvm 配置
  ZK_LOG_DIR: "/logs"                   # java运行日志
  ZK_HEAP_SIZE: "500M"                  # jvm堆内存限制
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zk-cm-script
  labels:
    app: zk
data:
  ready: |
    #!/bin/bash

    set -e

    # zkOk.sh uses the ruok ZooKeeper four letter work to determine if the instance
    # is health. The $? variable will be set to 0 if server responds that it is 
    # healthy, or 1 if the server fails to respond.

    OK=$(echo ruok | nc 127.0.0.1 $1)
    if [[ "$OK" == "imok" ]]; then
        exit 0
    else
        exit 1
    fi

  metrics: |
    #!/bin/sh
    echo mntr | nc localhost $1 >& 1

  start: |
    #!/bin/bash

    set -e

    HOST=`hostname -s`
    DOMAIN=`hostname -d`

    function print_servers() {
        for (( i=1; i<=$ZK_REPLICAS; i++ ))
        do
            echo "server.$i=$NAME-$((i-1)).$DOMAIN:$ZK_SERVER_PORT:$ZK_ELECTION_PORT"
        done
    }

    function create_config() {
        rm -f $CONFIG_FILE
        echo "# This file was autogenerated DO NOT EDIT" >> "$CONFIG_FILE"
        echo "clientPort=$ZK_CLIENT_PORT" >> "$CONFIG_FILE"
        echo "dataDir=$ZOO_DATA_DIR" >> "$CONFIG_FILE"
        echo "dataLogDir=$ZOO_DATA_LOG_DIR" >> "$CONFIG_FILE"

        echo "tickTime=$ZOO_TICK_TIME" >> "$CONFIG_FILE"
        echo "initLimit=$ZOO_INIT_LIMIT" >> "$CONFIG_FILE"
        echo "syncLimit=$ZOO_SYNC_LIMIT" >> "$CONFIG_FILE"

        echo "autopurge.snapRetainCount=$ZOO_AUTOPURGE_SNAPRETAINCOUNT" >> "$CONFIG_FILE"
        echo "autopurge.purgeInterval=$ZOO_AUTOPURGE_PURGEINTERVAL" >> "$CONFIG_FILE"
        echo "maxClientCnxns=$ZOO_MAX_CLIENT_CNXNS" >> "$CONFIG_FILE"
        echo "standaloneEnabled=$ZOO_STANDALONE_ENABLED" >> "$CONFIG_FILE"
        echo "admin.enableServer=$ZOO_ADMINSERVER_ENABLED" >> "$CONFIG_FILE"

        echo "minSessionTimeout=$MIN_SESSION_TIMEOUT" >> "$CONFIG_FILE"
        echo "maxSessionTimeout=$MAX_SESSION_TIMEOUT" >> "$CONFIG_FILE"

        if [ $ZK_REPLICAS -gt 1 ]; then
            print_servers >> $CONFIG_FILE
        fi

        echo "# Enable 4 world commands" >> "$CONFIG_FILE"
        echo "4lw.commands.whitelist=*" >> "$CONFIG_FILE"

        cat $CONFIG_FILE >&2
    }

    function create_myid() {
        echo "######## Input myid to $ID_FILE ########"

        if [[ ! -f $ID_FILE ]]; then
          echo $MY_ID >> $ID_FILE
        fi

        cat $ID_FILE >&2
    }

    function create_jvm_props() {
        rm -f $JAVA_ENV_FILE
        echo "ZOO_LOG_DIR=$ZK_LOG_DIR" >> "$JAVA_ENV_FILE"
        echo "JVMFLAGS=\"-Xmx$ZK_HEAP_SIZE -Xms$ZK_HEAP_SIZE\"" >> "$JAVA_ENV_FILE"
    }

    function create_log_props() {
        rm -f $LOGGER_PROPS_FILE
        echo "Creating ZooKeeper log4j configuration"
        echo "zookeeper.root.logger=CONSOLE" >> "$LOGGER_PROPS_FILE"
        echo "zookeeper.console.threshold=$LOG_LEVEL" >> "$LOGGER_PROPS_FILE"
        echo "log4j.rootLogger=\${zookeeper.root.logger}" >> "$LOGGER_PROPS_FILE"
        echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender" >> "$LOGGER_PROPS_FILE"
        echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}" >> "$LOGGER_PROPS_FILE"
        echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout" >> "$LOGGER_PROPS_FILE"
        echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n" >> "$LOGGER_PROPS_FILE"
    }

    ID_FILE="$ZOO_DATA_DIR/myid"
    CONFIG_FILE="$ZOO_CONF_DIR/zoo.cfg"
    LOGGER_PROPS_FILE="$ZOO_CONF_DIR/log4j.properties"
    JAVA_ENV_FILE="$ZOO_CONF_DIR/java.env"
    if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
        NAME=${BASH_REMATCH[1]}
        ORD=${BASH_REMATCH[2]}
    else
        echo "Fialed to parse name and ordinal of Pod"
        exit 1
    fi

    MY_ID=$((ORD+1))

    create_config && create_myid && create_jvm_props && create_log_props && exec zkServer.sh start-foreground

---
apiVersion: v1
kind: Service
metadata:
  name: zk-headless-service
  labels:
    app: zk
spec:
  ports:
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: zk
---
apiVersion: v1
kind: Service
metadata:
  name: zk-cluster-service
  labels:
    app: zk
spec:
  ports:
  - port: 2181
    name: client
  selector:
    app: zk
---
# 设置应用POD集群处于运行状态最低个数
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: zk-pdb
spec:
  selector:
    matchLabels:
      app: zk
  maxUnavailable: 1   # 表示最大不可用POD数，表示应用POD集群处于不可用状态的最大POD数
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zk
spec:
  selector:
    matchLabels:
      app: zk
  serviceName: zk-headless-service
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady   # Parallel        # 平行启动     #OrderedReady   # 采用顺序启动的方式
  template:
    metadata:
      labels:
        app: zk
    spec:
      affinity:
        podAntiAffinity:  # pod反关联性规则
          requiredDuringSchedulingIgnoredDuringExecution:   # 当该节点满足以下规则时，pod不希望被调度到该节点
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - zk
              topologyKey: "kubernetes.io/hostname"   # 为了控制在同一主机上没有两个实例以实现高可用
      containers:
      - name: k8s-zookeeper
        imagePullPolicy: IfNotPresent    # Never IfNotPresent Always
        image: "zookeeper:3.5.6"
        resources:          # 可以不设
          requests:
            memory: "1Gi"   # 内存需求
            cpu: "0.5"      # cpu频率
        ports:              # 如果环境变量中的端口变了，下面的端口号要相应改变
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        - containerPort: 8080
          name: admin-server
        envFrom:
        - configMapRef:
            name: zk-cm-env
        command:
        - sh
        - -c
        - "start-zookeeper"
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /data
        - name: config-volume
          mountPath: /usr/bin/zookeeper-ready
          subPath: zookeeper-ready
        - name: config-volume
          mountPath: /usr/bin/zookeeper-metrics
          subPath: zookeeper-metrics
        - name: config-volume
          mountPath: /usr/bin/start-zookeeper
          subPath: start-zookeeper
      volumes:
      - name: config-volume
        configMap:
          name: zk-cm-script
          defaultMode: 0555
          items:
          - key: ready
            path: zookeeper-ready
          - key: metrics
            path: zookeeper-metrics
          - key: start
            path: start-zookeeper
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi
      storageClassName: local-storage   # 需要先运行 zk-local-pv.yml 来创建好要用的持久卷
